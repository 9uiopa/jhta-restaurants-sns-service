<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.jhta.restaurants_service.mapper.ReviewMapper">

	<insert id="insertReview" parameterType="Review">
	  insert into REVIEWS
	  (rating, content, customer_id, store_id)
	  values
	  (#{rating}, #{content}, #{customer.id}, #{store.id})
	  <selectKey keyProperty="id" resultType="int" order="AFTER">
           SELECT LAST_INSERT_ID()
      </selectKey>
	</insert>
	
	<select id="getReviewById" parameterType="int" resultType="Review">
		select 
			id,			
			rating,
			content,
			create_date		as 	createDate,
			update_date		as	updateDate,
			liked_count		as	likedCount,
			report_count	as  reportCount,
			disabled,
			blocked,
			customer_id		as "customer.id",		
			store_id		as "store.id"
		from 
			REVIEWS
		where 
			id = #{value};
	</select>
	
	<select id="getAllReviewsByCustomerId" parameterType="int" resultType="Review">
		select 
			id,			
			rating,
			content,
			create_date		as 	createDate,
			update_date		as	updateDate,
			liked_count		as	likedCount,
			report_count	as  reportCount,
			disabled,
			blocked,
			customer_id		as "customer.id",		
			store_id		as "store.id"
		from 
			REVIEWS
		where customer_id = #{value}
		order by update_date desc;
	</select>

	<select id="getReviewByCustomerId" parameterType="int" resultType="Review">
		select 
			id,			
			rating,
			content,
			create_date		as 	createDate,
			update_date		as	updateDate,
			liked_count		as	likedCount,
			report_count	as  reportCount,
			disabled,
			blocked,
			customer_id		as "customer.id",		
			store_id		as "store.id"
		from 
			REVIEWS
		where 
			customer_id = #{value};
	</select>
	
	<select id="getAllReviewByStoreId" parameterType="int" resultType="Review">
		select 
			R.id,			
			R.rating,
			R.content,
			R.create_date		as 	createDate,
			R.update_date		as	updateDate,
			R.liked_count		as	likedCount,
			R.report_count	as  reportCount,
			R.disabled,
			R.blocked,
			R.customer_id		as "customer.id",		
			U.username			as "customer.name"
		from 
			REVIEWS R, USERS U
		where 
			R.store_id = #{value}
			and R.customer_id = U.id
		order by R.update_date desc
	</select>
	
	<select id="getReviewByStoreId" parameterType="int" resultType="Review">
		select 
			id,			
			rating,
			content,
			create_date		as 	createDate,
			update_date		as	updateDate,
			liked_count		as	likedCount,
			report_count	as  reportCount,
			disabled,
			blocked,
			customer_id		as "customer.id",		
			store_id		as "store.id"
		from 
			REVIEWS
		where 
			store_id = #{value};
	</select>
	
	<select id="getAllReviewRatingByStoreId" parameterType="int" resultType="ReviewSummaryDto">
		select 
			SUM(CASE WHEN RATING = 1 THEN 1 ELSE 0 END) as bad,
			SUM(CASE WHEN RATING = 3 THEN 1 ELSE 0 END) as soso,
			SUM(CASE WHEN RATING = 5 THEN 1 ELSE 0 END) as good
		from REVIEWS
		where store_id = #{value};	
	</select>
	
</mapper>