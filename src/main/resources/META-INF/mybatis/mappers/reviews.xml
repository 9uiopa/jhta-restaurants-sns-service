<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.jhta.restaurants_service.mapper.ReviewMapper">

	<insert id="insertReview" parameterType="Review">
	  insert into REVIEWS
	  	(rating, content, customer_id, store_id)
	  values
	  	(#{rating}, #{content}, #{customer.id}, #{store.id})
	  <selectKey keyProperty="id" resultType="int" order="AFTER">
           SELECT LAST_INSERT_ID()
      </selectKey>
	</insert>
	
	<select id="getReviewById" parameterType="int" resultType="Review">
		select 
			id,			
			rating,
			content,
			create_date		as 	createDate,
			update_date		as	updateDate,
			liked_count		as	likedCount,
			report_count	as  reportCount,
			disabled,
			blocked,
			customer_id		as "customer.id",		
			store_id		as "store.id"
		from 
			REVIEWS
		where 
			id = #{value};
	</select>
	
	<select id="getAllReviewsByCustomerId" parameterType="int" resultType="Review">
		select 
			id,			
			rating,
			content,
			create_date		as 	createDate,
			update_date		as	updateDate,
			liked_count		as	likedCount,
			report_count	as  reportCount,
			disabled,
			blocked,
			customer_id		as "customer.id",		
			store_id		as "store.id"
		from 
			REVIEWS
		where customer_id = #{value}
		order by update_date desc;
	</select>

	<select id="getReviewByCustomerId" parameterType="int" resultType="Review">
		select 
			id,			
			rating,
			content,
			create_date		as 	createDate,
			update_date		as	updateDate,
			liked_count		as	likedCount,
			report_count	as  reportCount,
			disabled,
			blocked,
			customer_id		as "customer.id",		
			store_id		as "store.id"
		from 
			REVIEWS
		where 
			customer_id = #{value};
	</select>
	<select id="getAllReviewsByStoreId" parameterType="int" resultType="Review">
		select 
			id,			
			rating,
			content,
			create_date		as 	createDate,
			update_date		as	updateDate,
			liked_count		as	likedCount,
			report_count	as  reportCount,
			disabled,
			blocked,
			customer_id		as "customer.id",		
			store_id		as "store.id"
		from 
			REVIEWS
		where store_id = #{value}
		order by update_date desc;
	</select>
<!--	
	<resultMap id="ReviewResultMap" type="kr.co.jhta.restaurants_service.dto.ReviewDto">
	    <id column="id" property="id" />
	    <result column="rating" property="rating" />
	    <result column="content" property="content" />
	    <result column="create_date" property="createDate" />
	    <result column="update_date" property="updateDate" />
	    <result column="liked_count" property="likedCount" />
	    <result column="report_count" property="reportCount" />
	    <result column="disabled" property="disabled" />
	    <result column="blocked" property="blocked" />
	    <result column="review_avg" property="reviewAvg" />
	    <association property="customer" javaType="kr.co.jhta.restaurants_service.vo.user.User">
	        <id column="customer_id" property="id" />
	        <result column="nickname" property="nickname" />
	        <result column="username" property="username" />
	    </association>
		<collection property="reviewPictures" javaType="kr.co.jhta.restaurants_service.vo.review.ReviewPicture">
	        <id column="picture_id" property="id"/>
	        <result column="picture_name" property="pictureName" />
	    </collection>
	    <collection property="reviewKeywords" javaType="kr.co.jhta.restaurants_service.vo.review.ReviewKeyword">
	        <id column="review_keyword_id" property="id"/>
	        <result column="keyword" property="keyword" /> 
	    </collection> 
    
	</resultMap>
	
	<select id="getAllReviewsByStoreId" parameterType="int" resultMap="ReviewResultMap">
			SELECT 
	   		R.id,			
		    R.rating,
		    R.content,
		    R.create_date,
		    R.update_date,
		    R.liked_count,
		    R.report_count,
		    R.disabled,
		    R.blocked,
		    R.store_id,
		    R.customer_id,
		    U.nickname,
		    U.username,
		    A.review_avg 
			P.id AS picture_id,
		    P.picture_name, 
		    K.id AS review_keyword_id,
		    K.keyword 
		FROM USERS U
		LEFT OUTER JOIN REVIEWS R ON U.id = R.customer_id
		LEFT OUTER JOIN REVIEW_PICTURES P ON R.id = P.review_id 
		LEFT OUTER JOIN REVIEW_KEYWORDS K ON R.id = K.review_id 
		LEFT OUTER JOIN (
		    SELECT 
		        customer_id,
		        AVG(rating) AS review_avg
		    FROM REVIEWS
		    GROUP BY customer_id
		) A ON U.id = A.customer_id
		WHERE R.store_id = #{value}
		ORDER BY R.update_date DESC;
	</select>
-->	
	<select id="getReviewByStoreId" parameterType="int" resultType="Review">
		select 
			id,			
			rating,
			content,
			create_date		as 	createDate,
			update_date		as	updateDate,
			liked_count		as	likedCount,
			report_count	as  reportCount,
			disabled,
			blocked,
			customer_id		as "customer.id",		
			store_id		as "store.id"
		from 
			REVIEWS
		where 
			store_id = #{value};
	</select>
	
	<select id="getAllReviewRatingByStoreId" parameterType="int" resultType="ReviewSummaryDto">
		select 
			SUM(CASE WHEN RATING = 1 THEN 1 ELSE 0 END) as bad,
			SUM(CASE WHEN RATING = 3 THEN 1 ELSE 0 END) as soso,
			SUM(CASE WHEN RATING = 5 THEN 1 ELSE 0 END) as good
		from REVIEWS
		where store_id = #{value};	
	</select>

	<resultMap id="ReviewResultMap" type="ReviewDto">
		<id column="id" property="id" />
		<result column="rating" property="rating" />
		<result column="content" property="content" />
		<result column="create_date" property="createDate" />
		<result column="update_date" property="updateDate" />
		<result column="liked_count" property="likedCount" />
		<result column="report_count" property="reportCount" />
		<result column="disabled" property="disabled" />
		<result column="blocked" property="blocked" />
		<result column="review_avg" property="reviewAvg"/>
		<result column="customer_id" property="customerId" />
		<result column="username" property="customerName" />
		<result column="nickname" property="nickname" />
		<result column="owner_Id" property="ownerId" />
		<collection property="reviewPictures" column="id" ofType="kr.co.jhta.restaurants_service.vo.review.ReviewPicture"
					select="kr.co.jhta.restaurants_service.mapper.ReviewPictureMapper.getReviewPicturesByReviewId"/>
		<collection property="reviewKeywords" column="id" ofType="kr.co.jhta.restaurants_service.vo.review.ReviewKeyword"
					select="kr.co.jhta.restaurants_service.mapper.ReviewKeywordMapper.getReviewKeywordsByReviewId"/>
	</resultMap>

	<select id="getReviewsPaginatedByStoreId" resultMap="ReviewResultMap">
		SELECT
			r.id,
			r.rating,
			r.content,
			r.create_date,
			r.update_date,
			r.liked_count,
			r.report_count,
			r.disabled,
			r.blocked,
			a.review_avg,
			r.customer_id,
			u.username,
			u.nickname,
			s.owner_Id
		FROM REVIEWS r
		JOIN USERS u ON r.customer_id = u.id
		JOIN STORES s ON r.store_id = s.id
		JOIN (
			SELECT
			customer_id,
			AVG(rating) AS review_avg
			FROM REVIEWS
			GROUP BY customer_id
		) a ON u.id = a.customer_id
		WHERE r.store_id = #{storeId}
		ORDER BY r.create_date DESC
		LIMIT #{begin}, #{end}
	</select>

	
	<select id="getThreeFollowerReivews" parameterType="int" resultType="Review">
		select
			r.id,			
			r.rating,
			r.content,
			r.create_date		as 	createDate,
			r.update_date		as	updateDate,
			r.liked_count		as	likedCount,
			r.report_count	as  reportCount,
			r.disabled,
			r.blocked,
			r.customer_id		as "customer.id",	
			u.username			as "customer.username",
			r.store_id		as "store.id",
			s.name			as "store.name"
		from
			REVIEWS r
		inner join
			USERS u on r.customer_id = u.id
		inner join
			STORES s on r.store_id = s.id
		where
			r.customer_id in (
				select follower_id
				from FOLLOWS
				where followed_id = #{followedId}
			)
		order by
			r.create_date desc
		limit
			0, 3
	</select>
	
	<select id="getThreeRecentReivews" parameterType="int" resultType="Review">
		select
			r.id,			
			r.rating,
			r.content,
			r.create_date		as 	createDate,
			r.update_date		as	updateDate,
			r.liked_count		as	likedCount,
			r.report_count	as  reportCount,
			r.disabled,
			r.blocked,
			r.customer_id		as "customer.id",	
			u.username			as "customer.username",	
			r.store_id		as "store.id",
			s.name			as "store.name"
		from
			REVIEWS r
		inner join
			STORES s on r.store_id = s.id
		inner join
			USERS u on r.customer_id = u.id	
		order by
			r.create_date desc
		limit
			0, 3
	</select>

	<select id="getReviewsPaginatedByStoreIdAndRating" resultType="ReviewDto">
		SELECT
			r.id,
			r.rating,
			r.content,
			r.create_date,
			r.update_date,
			r.liked_count,
			r.report_count,
			r.disabled,
			r.blocked,
			a.review_avg,
			r.customer_id,
			u.username,
			u.nickname,
			s.owner_Id
		FROM REVIEWS r
		JOIN USERS u ON r.customer_id = u.id
		JOIN STORES s ON r.store_id = s.id
		JOIN (
			SELECT
			customer_id,
			AVG(rating) AS review_avg
			FROM REVIEWS
			GROUP BY customer_id
		) a ON u.id = a.customer_id
		WHERE r.store_id = #{storeId} and r.rating = #{rating}
		ORDER BY r.create_date DESC
		LIMIT #{begin}, #{end}
	</select>
  
</mapper>