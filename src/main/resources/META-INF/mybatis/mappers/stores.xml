<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.jhta.restaurants_service.mapper.StoreMapper">


	<select id = "getAllStores" resultType="Store">
		select 
			business_license	as businesslicense,
			name				as name,
			address				as address,
			category			as category,
			zipcode				as zipcode,
			latitude			as latitude,
			longitude			as longitude,
			description			as description,
			phone				as phone,
			read_count			as readcount,
			create_date			as createdate,
			update_date			as updatedate,
			owner_id			as "owner.id",
			disabled			as disabled
			
		from 
			STORES
	</select>
	
<!--		일단 외부는 ROWNUMBER 포함한 테이블로 'BEGIN~ROWNUMBER~END'
			내부는
			SELECT 필요한거, ROWNUMBER로 정렬 ORDERBY(평점-리뷰테이블에서 평균(일단 이거만.),즐겨찾기-북마크테이블,리뷰순-리뷰테이블)
			FROM STORES, STORE_CATEGORY, 
			WHERE 카테고리~~ AND 키워드~~ 가게 이름으로 고정하자.
		-->
	<!-- 카테고리 적용, 리뷰평점 순 정렬, 페이지네이션 적용 -->

	
	<select id = "getStores" parameterType="map" resultType="SearchedStore">
		select * 
		from (
				select
		            ID      			as id,
		            NAME    			as name,
		           	REVIEW_AVG			as reviewAvg,
		            ROW_NUMBER() over (order by REVIEW_AVG DESC) as ROWNUM
		             
		        from
		        	(
		        	 select S.ID, 
		        	 		IFNULL(REVIEW_AVG,0) REVIEW_AVG, 
		        	 		S.NAME
		        	 from(
		        	 	(select STORE_ID, avg(RATING) as REVIEW_AVG
			        	 from REVIEWS
			        	 group by STORE_ID) R
			        	 RIGHT JOIN STORES S ON R.STORE_ID = S.ID
		        	 )
		
					where
					
						S.CATEGORY = #{category}
						
					 ) as TEMP) AS TEMP2
				 
			where ROWNUM between #{begin} and #{end}       
	
	</select>
	
<!-- 
	<select id = "getStores" parameterType="map" resultType="kr.co.jhta.restaurants_service.dto.SearchedStore">
		select * 
		from (
			select
	            S.ID      				as id,
	            S.NAME    				as name,
	           	nvl(R.REVIEW_AVG,0)		as reviewAvg,
	           	
	            ROW_NUMBER() over (order by R.REVIEW_AVG DESC) as ROW_NUMBER
	             
	        from
	        	(select STORE_ID, avg(RATING) REVIEW_AVG from REVIEWS group by STORE_ID) R,
	        	STORES S
  
			where
				S.ID = R.STORE_ID and
							
				<if test="category =! null">
					S.CATEGORY = #{category}
				</if>
					S.NAME = #{keyword}
			 )
			 
		where ROW_NUMBER between #{begin} and #{end}	       

	</select>
-->	
	

	<!--키워드검색,  카테고리화 할때 전체 row 자체가 해당 되는 row만 잡혀야함 -->
	<select id="getTotalRows" parameterType="map" resultType="int">
	  select count(*)
	  from STORES
	  <where>
	  	<choose>
	  	
			<when test="category ge 1 and category le 11">
				CATEGORY =  #{category}
			</when>  
				
		</choose>
 <!--		
	    <if test="keyword != null">
		     keyword가 null이 아닌 경우에만 NAME 컬럼의 값이 keyword를 포함하는지 검사 
		     NAME like concat('%', #{keyword}, '%')
	    </if>
-->		  
	  </where>
	</select>
</mapper>